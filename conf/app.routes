GET        /movements/arrivals                                                      routing.ArrivalsRouter.getArrivalsForEori(updatedSince: Option[OffsetDateTime] ?= None, movementEORI: Option[EORINumber] ?= None, movementReferenceNumber: Option[MovementReferenceNumber] ?= None, page: Option[PageNumber] ?= None, count: Option[ItemCount] ?= None, receivedUntil: Option[OffsetDateTime] ?= None, localReferenceNumber: Option[LocalReferenceNumber] ?= None)
POST       /movements/arrivals                                                      routing.ArrivalsRouter.createArrivalNotification()

PUT        /movements/arrivals/:arrivalId                                           controllers.ArrivalMovementController.resubmitArrivalNotification(arrivalId: ArrivalId)
GET        /movements/arrivals/:arrivalId                                           routing.ArrivalsRouter.getArrival(arrivalId: String)

POST       /movements/arrivals/:arrivalId/messages                                  routing.ArrivalsRouter.attachMessage(arrivalId: String)
GET        /movements/arrivals/:arrivalId/messages                                  routing.ArrivalsRouter.getArrivalMessageIds(arrivalId: String, receivedSince: Option[OffsetDateTime] ?= None, page: Option[PageNumber] ?= None, count: Option[ItemCount] ?= None, receivedUntil: Option[OffsetDateTime] ?= None)

GET        /movements/arrivals/:arrivalId/messages/:messageId                       routing.ArrivalsRouter.getArrivalMessage(arrivalId: String, messageId: String)

GET        /movements/departures                                                    routing.DeparturesRouter.getDeparturesForEori(updatedSince: Option[OffsetDateTime] ?= None, movementEORI: Option[EORINumber] ?= None, movementReferenceNumber: Option[MovementReferenceNumber] ?= None, page: Option[PageNumber] ?= None, count: Option[ItemCount] ?= None, receivedUntil: Option[OffsetDateTime] ?= None, localReferenceNumber: Option[LocalReferenceNumber] ?= None)
POST       /movements/departures                                                    routing.DeparturesRouter.submitDeclaration()

GET        /movements/departures/:departureId                                       routing.DeparturesRouter.getDeparture(departureId: String)

POST       /movements/departures/:departureId/messages                              routing.DeparturesRouter.attachMessage(departureId: String)
GET        /movements/departures/:departureId/messages                              routing.DeparturesRouter.getMessageIds(departureId: String, receivedSince: Option[OffsetDateTime] ?= None, page: Option[PageNumber] ?= None, count: Option[ItemCount] ?= None, receivedUntil: Option[OffsetDateTime] ?= None)

GET        /movements/departures/:departureId/messages/:messageId                   routing.DeparturesRouter.getMessage(departureId: String, messageId: String)

GET        /movements/:movementType/:movementId/messages/:messageId/body            v2.controllers.V2MovementsController.getMessageBody(movementType: MovementType, movementId: MovementId, messageId: models.common.MessageId)

GET        /movements/push-pull-notifications/box                                   controllers.PushPullNotificationController.getBoxInfo()

POST       /traders/:eori/movements/:movementType/:movementId/messages/:messageId   v2.controllers.V2MovementsController.attachMessageFromUpscan(eori: EORINumber, movementType: MovementType, movementId: MovementId, messageId: models.common.MessageId, clientId: Option[ClientId] ?= None)

